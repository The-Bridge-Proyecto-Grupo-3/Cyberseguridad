{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/api.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'env' is assigned a value but never used.","line":1,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"env"},"fix":{"range":[0,41],"text":""},"desc":"Remove unused variable 'env'."}]},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":23,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":24,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":25,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":26,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":27,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":28,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":13}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const env = require('../src/config/env');\nconst schemas = require('./components/schemas');\n\nmodule.exports = {\n\topenapi: '3.0.0',\n\tinfo: {\n\t\ttitle: 'API recomendación gasolineras',\n\t\tversion: '0.1.0',\n\t\tdescription: 'Documentación de la API para administración de empresas, conductores y vehículos'\n\t},\n\tservers: [\n\t\t{ url: '/' }\n\t],\n\ttags: [\n\t\t{ name: 'Auth' },\n\t\t{ name: 'Companies' },\n\t\t{ name: 'Drivers' },\n\t\t{ name: 'Receipts' },\n\t\t{ name: 'Stations' },\n\t\t{ name: 'Vehicles' },\n\t],\n\tpaths: {\n\t\t...require('./paths/auth'),\n\t\t...require('./paths/drivers'),\n\t\t...require('./paths/companies'),\n\t\t...require('./paths/receipts'),\n\t\t...require('./paths/stations'),\n\t\t...require('./paths/vehicles'),\n\t},\n\tcomponents: {\n\t\tschemas,\n\t\tsecuritySchemes: {\n\t\t\tbearerAuth: {\n\t\t\t\ttype: 'http',\n\t\t\t\tscheme: 'bearer',\n\t\t\t\tbearerFormat: 'JWT'\n\t\t\t}\n\t\t}\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/components/schemas.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":49,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const credentials = {\n\temail: { type: 'string' },\n\tpassword: { type: 'string' },\n};\n\nconst company = {\n\tname: { type: 'string' },\n\tCIF: { type: 'string' },\n\tpostal_code: { type: 'integer' },\n\taddress: { type: 'string' },\n\tstate: { type: 'string' },\n\tpayment_entity: { type: 'string' }\n};\n\nconst vehicle = {\n\tbrand: { type: 'string' },\n\tmodel: { type: 'string' },\n\tlicense_plate: { type: 'string' },\n\ttype: { type: 'string', enum: ['gas', 'electric'] },\n\tregistration_date: { type: 'string', format: 'date-time' }\n};\n\nconst driver = {\n\tfirst_name: { type: 'string' },\n\tlast_name: { type: 'string' }\n};\n\nconst receipt = {\n\tquantity: { type: 'number' },\n\tprice: { type: 'integer' },\n\tmileage: { type: 'integer' },\n\tfuel_type: { type: 'string', enum: ['95','98','glp','diesel','electric'] }\n};\n\nconst evstation = {\n\tid: { type: 'integer' },\n\toperator: { type: 'string' },\n\taddress: { type: 'string' },\n\tpostal_code: { type: 'integer' },\n\tstate: { type: 'string' },\n\tcity: { type: 'string' },\n\tlocation: { type: 'string' },\n\tlatitude: { type: 'number' },\n\tlongitude: { type: 'number' },\n\tmax_power: { type: 'integer' },\n\tdistance: { type: 'number' }\n};\n\nmodule.exports = {\n\tVehicle: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\tid: { type: 'integer' },\n\t\t\tcompany_id: { type: 'integer' },\n\t\t\t...vehicle,\n\t\t\tin_use_by: { type: 'integer', nullable: true }\n\t\t}\n\t},\n\tVehicleInput: {\n\t\ttype: 'object',\n\t\trequired: Object.keys(vehicle),\n\t\tproperties: {\n\t\t\t...vehicle\n\t\t}\n\t},\n\tVehicleUpdate: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t...vehicle\n\t\t}\n\t},\n\tLogin: {\n\t\ttype: 'object',\n\t\trequired: ['email', 'password'],\n\t\tproperties: {\n\t\t\t...credentials\n\t\t}\n\t},\n\tLoginResponse: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\trequires2FA: { \n\t\t\t\ttype: 'boolean',\n\t\t\t\trequired: false\n\t\t\t},\n\t\t\trole: { type: 'string', enum: ['admin','company','driver']},\n\t\t\tuser: {\n\t\t\t\ttype: 'object',\n\t\t\t\tnullable: true,\n\t\t\t\toneOf: [\n\t\t\t\t\t{ $ref: '#/components/schemas/Driver'},\n\t\t\t\t\t{ $ref: '#/components/schemas/Company'},\n\t\t\t\t]\n\t\t\t},\n\t\t}\n\t},\n\tCompanyInput: {\n\t\ttype: 'object',\n\t\trequired: Object.keys({...company,...credentials}),\n\t\tproperties: {\n\t\t\t...credentials,\n\t\t\t...company\n\t\t}\n\t},\n\tCompany: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\tid: { type: 'integer' },\n\t\t\t...company,\n\t\t\tsubscription_active: { type: 'boolean' }\n\t\t}\n\t},\n\tDriverInput: {\n\t\ttype: 'object',\n\t\trequired: Object.keys({...driver,...credentials}),\n\t\tproperties: {\n\t\t\t...credentials,\n\t\t\t...driver\n\t\t}\n\t},\n\tDriver: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\tid: { type: 'integer' },\n\t\t\tcompany_id: { type: 'integer' },\n\t\t\t...driver,\n\t\t\tVehicle: {\n\t\t\t\ttype: 'object',\n\t\t\t\tnullable: true,\n\t\t\t\t$ref: '#/components/schemas/Vehicle'\n\t\t\t}\n\t\t}\n\t},\n\tEnable2FA: {\n\t\ttype: 'object',\n\t\trequired: ['code'],\n\t\tproperties: {\n\t\t\tcode: { type: 'string' },\n\t\t}\n\t},\n\tEnable2FAResponse: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\tsecret: { type: 'string' },\n\t\t\tqrDataURL: { type: 'string' }\n\t\t}\n\t},\n\tReceiptInput: {\n\t\ttype: 'object',\n\t\trequired: Object.keys(receipt),\n\t\tproperties: {\n\t\t\t...receipt\n\t\t}\n\t},\n\tEVStation: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t...evstation\n\t\t}\n\t},\n\tError: {\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\terror: { type: 'string' }\n\t\t}\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/paths/auth.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const security = require('../security');\n\nmodule.exports = {\n\t'/auth/login': {\n\t\tpost: {\n\t\t\ttags: ['Auth'],\n\t\t\tsummary: 'Login',\n\t\t\tdescription: 'Login endpoint. The response object contains a token and whether or not a 2FA code is needed. If the 2FA is not needed, it also returns the user object with info about the company or the driver',\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Login' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Login successful',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/LoginResponse' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t401: { description: 'Unauthorized: Email not verified' },\n\t\t\t\t404: { description: 'Wrong credentials' },\n\t\t\t\t429: { description: 'Too many requests' }\n\t\t\t}\n\t\t}\n\t},\n\t'/auth/2fa': {\n\t\tpost: {\n\t\t\ttags: ['Auth'],\n\t\t\tsummary: 'Send 2FA code to finish login',\n\t\t\tsecurity: security.jwt,\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Enable2FA' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: '2FA enabled',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/LoginResponse' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t401: { description: 'Invalid token, expired or wrong code' },\n\t\t\t\t429: { description: 'Too many requests' }\n\t\t\t}\n\t\t},\n\t},\n\t'/auth/2fa/enable': {\n\t\tget: {\n\t\t\ttags: ['Auth'],\n\t\t\tsummary: 'Get TOTP secret to enable 2FA',\n\t\t\tsecurity: security.jwt,\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Registered vehicle',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Enable2FAResponse' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t401: { description: 'Unauthorized' },\n\t\t\t\t409: { description: 'Already enabled' },\n\t\t\t}\n\t\t},\n\t\tpost: {\n\t\t\ttags: ['Auth'],\n\t\t\tsummary: 'Send 2FA code to enable it',\n\t\t\tsecurity: security.jwt,\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Enable2FA' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t204: { description: '2FA enabled' },\n\t\t\t\t401: { description: 'Invalid token, expired or wrong code' },\n\t\t\t\t409: { description: '2FA already enabled' }\n\t\t\t}\n\t\t},\n\t},\n\t'/auth/verify': {\n\t\tget: {\n\t\t\ttags: ['Auth'],\n\t\t\tsummary: 'Verify email',\n\t\t\tparameters: [\n\t\t\t\t{ name: 'token', in: 'query', required: true, description: 'Verification token', schema: { type: 'string' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t204: {\n\t\t\t\t\tdescription: 'Email successfully verified',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t400: { description: 'Missing token' },\n\t\t\t\t401: { description: 'Unauthorized' },\n\t\t\t\t429: { description: 'Too many requests' }\n\t\t\t}\n\t\t},\n\t\tpost: {\n\t\t\ttags: ['Auth'],\n\t\t\tsummary: 'Resend verification email',\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\trequired: ['email'],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\temail: { type: 'string' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t204: { description: 'Email sent or not found in DB' },\n\t\t\t\t429: { description: 'Too many requests' }\n\t\t\t}\n\t\t}\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/paths/companies.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const security = require('../security');\n\nmodule.exports = {\n\t'/companies': {\n\t\tget: {\n\t\t\ttags: ['Companies'],\n\t\t\tsummary: 'Lists all companies',\n\t\t\tsecurity: security.jwt,\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'List all companies',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': {\n\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: { $ref: '#/components/schemas/Company' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access forbidden. Only admins' }\n\t\t\t}\n\t\t},\n\t\tpost: {\n\t\t\ttags: ['Companies'],\n\t\t\tsummary: 'Register a company',\n\t\t\tsecurity: security.jwt,\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/CompanyInput' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t201: { description: 'Registered company' }\n\t\t\t}\n\t\t}\n\t},\n\t'/companies/{id}': {\n\t\tget: {\n\t\t\ttags: ['Companies'],\n\t\t\tsummary: 'Get a company by ID',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'id', in: 'path', required: true, description: 'ID of the company', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Information of company with ID',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Company' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access Forbidden: Only admins' },\n\t\t\t\t404: { description: 'Company not found' },\n\t\t\t}\n\t\t},\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/paths/drivers.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const security = require('../security');\n\nmodule.exports = {\n\t'/drivers': {\n\t\tget: {\n\t\t\ttags: ['Drivers'],\n\t\t\tsummary: 'Lists all drivers',\n\t\t\tsecurity: security.jwt,\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'List all drivers',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': {\n\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: { $ref: '#/components/schemas/Driver' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access forbidden. Only admins or companies' }\n\t\t\t}\n\t\t},\n\t\tpost: {\n\t\t\ttags: ['Drivers'],\n\t\t\tsummary: 'Register a driver',\n\t\t\tsecurity: security.jwt,\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/DriverInput' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t201: { description: 'Registered driver' }\n\t\t\t}\n\t\t}\n\t},\n\t'/drivers/{id}': {\n\t\tget: {\n\t\t\ttags: ['Drivers'],\n\t\t\tsummary: 'Get a driver by ID',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'id', in: 'path', required: true, description: 'ID of the driver', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Information of driver with ID',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Driver' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access Forbidden: Only admins or companies' },\n\t\t\t\t404: { description: 'Driver not found' },\n\t\t\t}\n\t\t},\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/paths/receipts.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const security = require('../security');\n\nmodule.exports = {\n\t'/receipts': {\n\t\tget: {\n\t\t\ttags: ['Receipts'],\n\t\t\tsummary: 'Get all receipts',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'company_id', in: 'query', required: false, description: 'Company ID (only for admins)', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: { description: 'List of all receipts' },\n\t\t\t\t403: { description: 'Access Forbidden: only company can access receipts' }\n\t\t\t}\n\t\t},\n\t\tpost: {\n\t\t\ttags: ['Receipts'],\n\t\t\tsummary: 'Register a new receipt',\n\t\t\tsecurity: security.jwt,\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/ReceiptInput' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t201: { description: 'Receipt registered' },\n\t\t\t\t403: { description: 'Access Forbidden: only driver can create receipts' },\n\t\t\t\t409: { description: \"Driver doesn't have a vehicle assigned\" },\n\t\t\t}\n\t\t}\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/paths/stations.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const security = require('../security');\n\nmodule.exports = {\n\t'/stations/ev': {\n\t\tget: {\n\t\t\ttags: ['Stations'],\n\t\t\tsummary: 'Get all receipts',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'lat', in: 'query', required: true, description: 'Latitude', schema: { type: 'number' }},\n\t\t\t\t{ name: 'lon', in: 'query', required: true, description: 'Longitude', schema: { type: 'number' }},\n\t\t\t\t{ name: 'radius', in: 'query', required: false, description: 'Radius in kilometers', schema: { type: 'number', default: 20 }},\n\t\t\t\t{ name: 'limit', in: 'query', required: false, description: 'Max number of stations', schema: { type: 'integer', default: 100 }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'List of all EV charging stations in a certain radius',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/EVStation' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t},\n\t// '/stations/gas': {\n\t// \tget: {\n\t// \t\ttags: ['Stations'],\n\t// \t\tsummary: 'Get all receipts',\n\t// \t\tsecurity: security.jwt,\n\t// \t\tparameters: [\n\t// \t\t\t{ name: 'lat', in: 'query', required: true, description: 'Latitude', schema: { type: 'number' }},\n\t// \t\t\t{ name: 'lon', in: 'query', required: true, description: 'Longitude', schema: { type: 'number' }},\n\t// \t\t\t{ name: 'radius', in: 'query', required: false, description: 'Radius in kilometers', schema: { type: 'number', default: 20 }},\n\t// \t\t\t{ name: 'limit', in: 'query', required: false, description: 'Max number of stations', schema: { type: 'integer', default: 100 }}\n\t// \t\t],\n\t// \t\tresponses: {\n\t// \t\t\t200: { description: 'List of all gas stations in a certain radius' },\n\t// \t\t}\n\t// \t},\n\t// }\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/paths/vehicles.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":13,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const security = require('../security');\n\nconst driverIdSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tdriver_id: {\n\t\t\ttype: 'integer',\n\t\t\tdescription: 'Driver ID to assign the vehicle to. Only needed if user is not a driver'\n\t\t}\n\t}\n};\n\nmodule.exports = {\n\t'/vehicles': {\n\t\tget: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Lists all vehicles',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'available', in: 'query', required: false, description: 'Filter unused vehicles', schema: { type: 'boolean' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'List all vehicles',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': {\n\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tpost: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Register a vehicle',\n\t\t\tsecurity: security.jwt,\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/VehicleInput' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t201: {\n\t\t\t\t\tdescription: 'Registered vehicle',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access Forbidden: driver cannot create vehicles' },\n\t\t\t}\n\t\t}\n\t},\n\t'/vehicles/{id}': {\n\t\tget: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Get a vehicle by ID',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'id', in: 'path', required: true, description: 'ID of the vehicle', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Information of vehicle with ID',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t404: { description: 'Vehicle not found' },\n\t\t\t}\n\t\t},\n\t\tput: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Modify a vehicle',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'id', in: 'path', required: true, description: 'ID of the vehicle', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\trequestBody: {\n\t\t\t\trequired: true,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: { $ref: '#/components/schemas/VehicleUpdate' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Registered vehicle',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access Forbidden: driver cannot modify vehicles' },\n\t\t\t\t404: { description: 'Vehicle not found' },\n\t\t\t}\n\t\t},\n\t\tdelete: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Delete a vehicle',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'id', in: 'path', required: true, description: 'ID of the vehicle', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Registered vehicle',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access Forbidden: driver cannot delete vehicles' },\n\t\t\t\t404: { description: 'Vehicle not found' },\n\t\t\t}\n\t\t}\n\t},\n\t'/vehicles/{id}/assign': {\n\t\tput: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Assign a vehicle to a driver',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'id', in: 'path', required: true, description: 'ID of the vehicle', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\trequestBody: {\n\t\t\t\trequired: false,\n\t\t\t\tcontent: {\n\t\t\t\t\t'application/json': {\n\t\t\t\t\t\tschema: driverIdSchema\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponses: {\n\t\t\t\t201: {\n\t\t\t\t\tdescription: 'Vehicle assigned succesfully',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t400: { description: 'Missing driver_id' },\n\t\t\t\t404: { description: 'Vehicle not found' },\n\t\t\t\t409: { description: 'Vehicle already assigned or driver has another vehicle' },\n\t\t\t}\n\t\t},\n\t\tdelete: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Remove driver from vehicle',\n\t\t\tsecurity: security.jwt,\n\t\t\tparameters: [\n\t\t\t\t{ name: 'id', in: 'path', required: true, description: 'ID of the vehicle', schema: { type: 'integer' }}\n\t\t\t],\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Registered vehicle',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access Forbidden: driver cannot remove other drivers from vehicles' },\n\t\t\t\t404: { description: 'Vehicle not found' },\n\t\t\t}\n\t\t}\n\t},\n\t'/vehicles/assigned': {\n\t\tget: {\n\t\t\ttags: ['Vehicles'],\n\t\t\tsummary: 'Get a driver\\'s assigned vehicle',\n\t\t\tsecurity: security.jwt,\n\t\t\tresponses: {\n\t\t\t\t200: {\n\t\t\t\t\tdescription: 'Information of vehicle assigned to driver',\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t'application/json': { \n\t\t\t\t\t\t\tschema: { $ref: '#/components/schemas/Vehicle' }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t403: { description: 'Access Forbidden: only driver role' },\n\t\t\t\t404: { description: 'Vehicle not found' },\n\t\t\t}\n\t\t}\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/docs/security.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n\tjwt: [{ bearerAuth: []}]\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/config/cookies.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const env = require(\"./env\");\n\nmodule.exports = {\n\tsetCookie: (res,name,value) => {\n\t\tres.cookie(name, value, {\n\t\t\thttpOnly: true,\n\t\t\tsecure: env.cookie.secure,\n\t\t\tsameSite: env.cookie.sameSite,\n\t\t\tmaxAge: env.cookie.age\n\t\t});\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/config/db.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":7,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":7,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":7,"endColumn":16,"suggestions":[{"fix":{"range":[167,197],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":9,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":10,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":12}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { sequelize } = require(\"../models\");\n\nmodule.exports = async function connectDB() {\n  try {\n    await sequelize.authenticate();\n    await sequelize.sync();\n    console.log(\"✔ DB conectada\");\n  } catch (error) {\n    console.error(\"❌ Error DB:\", error);\n    process.exit();\n  }\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/config/env.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":4,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":5,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":7,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":8,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":9,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":10,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":11,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":12,"column":8,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":13,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":14,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":19},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":14,"column":35,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":14,"endColumn":37,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[424,426],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":17,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":18,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":19,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":20,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":21,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":22,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":24,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":25,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":27,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":28,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":20},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":28,"column":50,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":28,"endColumn":52,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[946,948],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":29,"column":8,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":31,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":33,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":34,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":35,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":36,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":37,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":40,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":41,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":42,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":28}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"require(\"dotenv\").config();\n\nmodule.exports = {\n\tnodeEnv: process.env.NODE_ENV ?? \"development\",\n\tport: Number(process.env.PORT ?? 4000),\n\tdb: {\n\t\thost: process.env.DB_HOST,\n\t\tport: Number(process.env.DB_PORT ?? 3306),\n\t\tname: process.env.DB_NAME,\n\t\tuser: process.env.DB_USER,\n\t\tpass: process.env.DB_PASS,\n\t\tssl: process.env.DB_SSL === 'true',\n\t\tdialect: process.env.DB_DIALECT ?? 'mysql',\n\t\tlogging: process.env.DB_LOGGING == \"true\",\n\t},\n\tjwt: {\n\t\taccessSecret: process.env.JWT_ACCESS_SECRET,\n\t\ttempSecret: process.env.JWT_TEMP_SECRET,\n\t\temailSecret: process.env.EMAIL_TOKEN_SECRET,\n\t\taccessExpires: process.env.JWT_TOKEN_EXPIRES ?? \"1d\",\n\t\ttempExpires: process.env.JWT_TEMP_EXPIRES ?? \"5m\",\n\t\temailExpires: process.env.EMAIL_TOKEN_EXPIRES,\n\t},\n\tbcryptRounds: process.env.BCRYPT_ROUNDS ?? 12,\n\tcorsOrigin: process.env.CORS_ORIGIN,\n\tcookie: {\n\t\tsameSite: process.env.COOKIE_SAME_SITE ?? \"Strict\",\n\t\tsecure:  (process.env.COOKIE_SECURE ?? \"true\") == \"true\",\n\t\tage: process.env.COOKIE_AGE\n\t},\n\tappBaseUrl: process.env.APP_BASE_URL ?? \"http://localhost:4000\",\n\tsmtp: {\n\t\thost: process.env.SMTP_HOST,\n\t\tport: Number(process.env.SMTP_PORT ?? 587),\n\t\tsecure: process.env.SMTP_SECURE === \"true\",\n\t\tuser: process.env.SMTP_USER,\n\t\tpass: process.env.SMTP_PASS,\n\t},\n\tmail: {\n\t\tfrom: process.env.MAIL_FROM ?? \"no-reply@example.com\",\n\t\tlogging: process.env.NODEMAILER_LOGGING === \"true\",\n\t\tsendVerification: process.env.EMAIL_SEND === \"true\"\n\t},\n};\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/config/nodemailer.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":14,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":7}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const nodemailer = require('nodemailer');\nconst env = require('../config/env');\n\nconst transport = nodemailer.createTransport({\n    port: env.smtp.port,\n    host: env.smtp.host,\n    secure: env.smtp.secure,\n    tls: {\n        rejectUnauthorized: true\n    },\n    logger: env.mail.logging\n});\n\nmodule.exports = {\n    sendMail: ({ to, subject, text, html }) => {\n        transport.sendMail({\n            to, subject, text, html,\n            from: env.mail.from\n        });\n    }\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/errors/httpErrors.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":27,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"class HttpError extends Error {\n\tconstructor(message, status = 500) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t}\n}\n\nconst createHttpError = (error,status) => {\n\treturn class extends HttpError {\n\t\tconstructor(message) {\n\t\t\tsuper(message, status);\n\t\t\tthis.name = error+\"Error\";\n\t\t\tError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n}\n\nconst errors = [\n\t[\"BadRequest\",400],\n\t[\"Unauthorized\",401],\n\t[\"Forbidden\",403],\n\t[\"NotFound\",404],\n\t[\"Conflict\",409],\n\t[\"InternalServer\",500]\n]\n\nmodule.exports = {\n\t...Object.fromEntries(errors.map(error => [error[0]+\"Error\", createHttpError(...error)] )),\n\tHttpError\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/index.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":8,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":14,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":15,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":17,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":17,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":17,"endColumn":14,"suggestions":[{"fix":{"range":[512,542],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readdirSync from package \"fs\" with non literal argument at index 0","line":33,"column":1,"nodeType":"CallExpression","endLine":34,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":34,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":37,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":43,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":48,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":48,"endColumn":16,"suggestions":[{"fix":{"range":[1300,1350],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require(\"express\");\nconst env = require(\"./config/env\");\nconst connectDB = require(\"./config/db\");\nconst morgan = require(\"morgan\");\nconst fs = require('fs');\nconst path = require('path');\nconst cors = require('cors');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\n\n// Swagger\nif(env.nodeEnv === \"development\") {\n  const swaggerUi = require(\"swagger-ui-express\");\n  const apiSpec = require('../docs/api');\n  app.use('/docs', swaggerUi.serve, swaggerUi.setup(apiSpec));\n  console.log(\"Swagger loaded\");\n}\n\napp.use(express.json({ limit: '10kb' }));\napp.use(morgan('tiny')); // Request logger\n\n// CORS policy\napp.use(cors({\n  origin: env.corsOrigin,\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type'],\n  credentials: true\n}));\napp.use(cookieParser());\n\n// Dynamic loading of routes\nfs\n  .readdirSync(path.join(__dirname, 'routes'))\n  .forEach(file => {\n    const route = file.endsWith(\".js\") ? file.slice(0,-3):file;\n    const routeImport = require(`./routes/${route}`);\n    if(typeof routeImport !== 'function') \n      throw new Error(`Undefined router: /${route}`);\n    app.use(`/${route}`, routeImport);\n  });\n\napp.use(require('./middleware/errorHandler'));\n\n(async () => {\n  await connectDB();\n  app.listen(env.port, () => {\n    console.log(`Server started on port ${env.port}`);\n  });\n})();\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/middleware/authentication.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":67,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":74},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":7}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { User, Company, Driver, Vehicle } = require('../models');\nconst { verifyLogin } = require('../utils/jwt');\nconst { UnauthorizedError, ForbiddenError, InternalSeverError } = require('../errors/httpErrors');\n\nmodule.exports = {\n\tauthenticate: async (req,res,next) => {\n\t\ttry {\n\t\t\tconst token = req.cookies.token;\n\t\t\tconst { payload, err } = verifyLogin(token);\n\t\t\tif(err) throw new UnauthorizedError(err);\n\t\t\t// TODO validate tokens in the DB?\n\t\t\treq.user = await User.findByPk(payload.sub, {\n\t\t\t\tinclude: [\n\t\t\t\t\tCompany,\n\t\t\t\t\t{ model:Driver, include:[Vehicle]}\n\t\t\t\t]\n\t\t\t});\n\t\t\tnext();\n\t\t} catch (error) {\n\t\t\tnext(error);\n\t\t}\n\t},\n\thasRole: (...roles) => async (req,res,next) => {\n\t\tif(!req.user) next(new InternalSeverError(\"Falta autenticación.\"));\n\t\tif(!roles.includes(req.user.role)) next(new ForbiddenError(`Roles permitidos: ${roles.join(', ')}`));\n\t\tnext();\n\t},\n\tlimitCompanyScope: (req) => {\n\t\tconst role = req.user.role;\n\t\tif(role===\"admin\") return null;\n\t\tif(role===\"company\") return req.user.company_id;\n\t\tif(role===\"driver\") return req.user.Driver.company_id;\n\t\tthrow new InternalSeverError('Role not implemented');\n\t}\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/middleware/errorHandler.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":3,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[89,94],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":4,"column":2,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":17,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":7}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { HttpError } = require('../errors/httpErrors');\n\nconst errorHandler = (err,req,res,next) => {\n\tconsole.error(err);\n\tif (\n\t\terr.name === 'SequelizeValidationError' ||\n\t\terr.name === 'SequelizeUniqueConstraintError'\n\t) {\n\t\tres.status(400).send({ error: err.errors.map(e => e.message).join('. ') });\n\t} else if(err instanceof HttpError) {\n\t\tres.status(err.status).send({ error: err.message })\n\t} else {\n\t\tres.status(500).send({ error: 'Internal Server Error' })\n\t}\n}\n\nmodule.exports = errorHandler;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/models/company.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":30,"column":28,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":30,"endColumn":30,"fix":{"range":[605,607],"text":"!=="}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":30,"column":54,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":30,"endColumn":56,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[631,633],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":40,"column":24,"nodeType":"MemberExpression","endLine":40,"endColumn":30},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":44,"column":17,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":44,"endColumn":19,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1243,1245],"text":"==="},"desc":"Use '===' instead of '=='."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"module.exports = (sequelize, DataTypes) => {\n\tconst Company = sequelize.define('Company', {\n\t\tid: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tautoIncrement: true,\n\t\t\tprimaryKey: true\n\t\t},\n\t\tname: {\n\t\t\ttype: DataTypes.STRING(60),\n\t\t\tallowNull: false\n\t\t},\n\t\tpostal_code: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tallowNull: false\n\t\t},\n\t\taddress: {\n\t\t\ttype: DataTypes.STRING(150),\n\t\t\tallowNull: false\n\t\t},\n\t\tstate: {\n\t\t\ttype: DataTypes.STRING(40),\n\t\t\tallowNull: false\n\t\t},\n\t\tCIF: {\n\t\t\ttype: DataTypes.CHAR(9),\n\t\t\tallowNull: false,\n\t\t\tunique: true,\n\t\t\tvalidate: {\n\t\t\t\tvalidCIF(cif) {\n\t\t\t\t\tif(!cif || typeof cif != \"string\" || cif.length != 9) return false;\n\t\t\t\t\tif(!/^[A-HJNP-SU-W]\\d{7}[0-9A-J]$/.test(cif)) return false;\n\t\t\t\t\tif((cif.substring(1,3) === \"00\" || /[NP-SW]/.test(cif[0])) && !/[A-J]/.test(cif[8])) return false;\n\t\t\t\t\tif(/[ABEH]/.test(cif[0]) && !/\\d/.test(cif[8])) return false;\n\n\t\t\t\t\tlet control = cif[8];\n\t\t\t\t\tif(/[A-J]/.test(control)) control = (cif[8].charCodeAt(0)-54)%10;\n\t\t\t\t\tconst sumEven = (+cif[2]) + (+cif[4]) + (+cif[6]);\n\t\t\t\t\tlet sumOdd = 0;\n\t\t\t\t\tfor(let i = 1; i <= 7; i+=2) {\n\t\t\t\t\t\tconst prod = 2*(+cif[i]);\n\t\t\t\t\t\tsumOdd += prod < 10 ? prod:prod-9;\n\t\t\t\t\t}\n\t\t\t\t\tconst res = (10-(sumEven + sumOdd)%10)%10;\n\t\t\t\t\treturn res == control;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsubscription_active: {\n\t\t\ttype: DataTypes.BOOLEAN,\n\t\t\tallowNull: false,\n\t\t\tdefaultValue: true\n\t\t},\n\t\tpayment_entity: {\n\t\t\ttype: DataTypes.STRING(30),\n\t\t\tallowNull: false\n\t\t}\n\t}, {\n\t\ttableName: 'companies',\n\t\ttimestamps: true\n\t});\n\n\tCompany.associate = (models) => {\n\t\tCompany.hasMany(models.Driver, { foreignKey: 'company_id' });\n\t\tCompany.hasMany(models.Vehicle, { foreignKey: 'company_id' });\n\t\tCompany.hasOne(models.User, { foreignKey: 'company_id' });\n\t};\n\n\treturn Company;\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/models/driver.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = (sequelize, DataTypes) => {\n\tconst Driver = sequelize.define('Driver', {\n\t\tid: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tautoIncrement: true,\n\t\t\tprimaryKey: true\n\t\t},\n\t\tcompany_id: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tallowNull: false,\n\t\t\treferences: {\n\t\t\t\tmodel: 'companies',\n\t\t\t\tkey: 'id',\n\t\t\t},\n\t\t},\n\t\tfirst_name: {\n\t\t\ttype: DataTypes.STRING(40),\n\t\t\tallowNull: false\n\t\t},\n\t\tlast_name: {\n\t\t\ttype: DataTypes.STRING(60),\n\t\t\tallowNull: false\n\t\t}\n\t}, {\n\t\ttableName: 'drivers',\n\t\ttimestamps: true\n\t});\n\n\tDriver.associate = (models) => {\n\t\tDriver.belongsTo(models.Company, { foreignKey: 'company_id' });\n\t\tDriver.hasOne(models.Vehicle, { foreignKey: 'in_use_by' });\n\t\tDriver.hasOne(models.User, { foreignKey: 'driver_id' });\n\t\tDriver.hasMany(models.Receipt, { foreignKey: 'driver_id' });\n\t};\n\n\treturn Driver;\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/models/evstation.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = (sequelize, DataTypes) => {\n\tconst EVStation = sequelize.define('EVStation', {\n\t\tid: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tautoIncrement: true,\n\t\t\tprimaryKey: true\n\t\t},\n\t\toperator: {\n\t\t\ttype: DataTypes.STRING(60),\n\t\t\tallowNull: false\n\t\t},\n\t\taddress: {\n\t\t\ttype: DataTypes.STRING(150),\n\t\t\tallowNull: false\n\t\t},\n\t\tpostal_code: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tallowNull: false\n\t\t},\n\t\tstate: {\n\t\t\ttype: DataTypes.STRING(40),\n\t\t\tallowNull: false\n\t\t},\n\t\tcity: {\n\t\t\ttype: DataTypes.STRING(50),\n\t\t\tallowNull: false,\n\t\t},\n\t\tlocation: {\n\t\t\ttype: DataTypes.STRING(50),\n\t\t\tallowNull: false\n\t\t},\n\t\tlatitude: {\n\t\t\ttype: DataTypes.FLOAT,\n\t\t\tallowNull: false\n\t\t},\n\t\tlongitude: {\n\t\t\ttype: DataTypes.FLOAT,\n\t\t\tallowNull: false\n\t\t},\n\t\tmax_power: {\n\t\t\ttype: DataTypes.INTEGER,\n\t\t\tallowNull: false\n\t\t}\n\t}, {\n\t\ttableName: 'evstations',\n\t\ttimestamps: false,\n\t\tindexes: [\n\t\t\t{ unique: false, fields: ['latitude','longitude']}\n\t\t]\n\t});\n\n\treturn EVStation;\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/models/index.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'__filename' is not defined.","line":6,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":20},{"ruleId":"prefer-const","severity":1,"message":"'sequelize' is never reassigned. Use 'const' instead.","line":12,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":12,"endColumn":14,"fix":{"range":[303,502],"text":"const sequelize = new Sequelize(env.db.name, env.db.user, env.db.pass, {\n  host: env.db.host,\n  port: env.db.port,\n  dialect: env.db.dialect,\n  logging: env.db.logging,\n  dialectOptions: sslOptions\n});"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readdirSync from package \"fs\" with non literal argument at index 0","line":20,"column":1,"nodeType":"CallExpression","endLine":21,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":21,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":31,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":31,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":46},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":36,"column":7,"nodeType":"MemberExpression","endLine":36,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":37,"column":5,"nodeType":"MemberExpression","endLine":37,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":44,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":7}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst basename = path.basename(__filename);\nconst env = require('../config/env.js');\nconst db = {};\n\nconst sslOptions = env.db.ssl ? { ssl: { require: true, rejectUnauthorized: false } }:{};\n\nlet sequelize = new Sequelize(env.db.name, env.db.user, env.db.pass, {\n  host: env.db.host,\n  port: env.db.port,\n  dialect: env.db.dialect,\n  logging: env.db.logging,\n  dialectOptions: sslOptions\n});\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => {\n    return (\n      !file.startsWith('.') &&\n      file !== basename &&\n      file.endsWith('.js') &&\n      file.indexOf('.test.js') === -1\n    );\n  })\n  .forEach(file => {\n    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/models/receipts.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = (sequelize, DataTypes) => {\n\tconst Receipt = sequelize.define('Receipt', {\n\t\tdriver_id: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tprimaryKey: true,\n\t\t\tallowNull: false,\n\t\t\treferences: {\n\t\t\t\tmodel: 'drivers',\n\t\t\t\tkey: 'id',\n\t\t\t},\n\t\t},\n\t\tvehicle_id: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tprimaryKey: true,\n\t\t\tallowNull: false,\n\t\t\treferences: {\n\t\t\t\tmodel: 'vehicles',\n\t\t\t\tkey: 'id',\n\t\t\t},\n\t\t},\n\t\tfuel_type: {\n\t\t\ttype: DataTypes.ENUM('95','98','diesel','glp','electric'),\n\t\t\tallowNull: false\n\t\t},\n\t\tprice: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tallowNull: false\n\t\t},\n\t\tquantity: {\n\t\t\ttype: DataTypes.FLOAT.UNSIGNED,\n\t\t\tallowNull: true\n\t\t},\n\t\tmileage: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tallowNull: true\n\t\t}\n\t}, {\n\t\ttableName: 'receipts',\n\t\ttimestamps: true,\n\t\tindexes:[{ unique: false, fields:['fuel_type'] }]\n\t});\n\n\tReceipt.associate = (models) => {\n\t\tReceipt.belongsTo(models.Driver, { foreignKey: 'driver_id' });\n\t\tReceipt.belongsTo(models.Vehicle, { foreignKey: 'vehicle_id'});\n\t};\n\n\treturn Receipt;\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/models/user.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = (sequelize, DataTypes) => {\n\tconst User = sequelize.define(\n\t\t\"User\",\n\t\t{\n\t\t\tid: {\n\t\t\t\ttype: DataTypes.BIGINT.UNSIGNED,\n\t\t\t\tautoIncrement: true,\n\t\t\t\tprimaryKey: true,\n\t\t\t},\n\t\t\temail: {\n\t\t\t\ttype: DataTypes.STRING(190),\n\t\t\t\tallowNull: false,\n\t\t\t\tvalidate: { isEmail: true }\n\t\t\t},\n\t\t\trole: {\n\t\t\t\ttype: DataTypes.ENUM(\"admin\",\"company\",\"driver\"),\n\t\t\t\tallowNull: false\n\t\t\t},\n\t\t\tcompany_id: {\n\t\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\t\tallowNull: true,\n\t\t\t\treferences: {\n\t\t\t\t\tmodel: 'companies',\n\t\t\t\t\tkey: 'id',\n\t\t\t\t},\n\t\t\t},\n\t\t\tdriver_id: {\n\t\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\t\tallowNull: true,\n\t\t\t\treferences: {\n\t\t\t\t\tmodel: 'drivers',\n\t\t\t\t\tkey: 'id',\n\t\t\t\t},\n\t\t\t},\n\t\t\tpasswordHash: {\n\t\t\t\ttype: DataTypes.CHAR(60),\n\t\t\t\tallowNull: false,\n\t\t\t},\n\t\t\ttwoFactorEnabled: {\n\t\t\t\ttype: DataTypes.BOOLEAN,\n\t\t\t\tallowNull: false,\n\t\t\t\tdefaultValue: false,\n\t\t\t},\n\t\t\ttwoFactorSecret: {\n\t\t\t\ttype: DataTypes.CHAR(32),\n\t\t\t\tallowNull: true,\n\t\t\t},\n\t\t\ttwoFactorGeneratedAt: {\n\t\t\t\ttype: DataTypes.DATE,\n\t\t\t\tallowNull: true\n\t\t\t},\n\t\t\temailVerified: {\n\t\t\t\ttype: DataTypes.BOOLEAN,\n\t\t\t\tallowNull: false,\n\t\t\t\tdefaultValue: false,\n\t\t\t},\n\t\t\temailVerifiedAt: {\n\t\t\t\ttype: DataTypes.DATE,\n\t\t\t\tallowNull: true,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttableName: \"users\",\n\t\t\tparanoid: true,\n\t\t\tindexes: [{ unique: true, fields: [\"email\"] }, { fields: [\"role\"] }],\n\t\t\tvalidate: {\n\t\t\t\tvalidRole() {\n\t\t\t\t\tif(this.role === \"admin\" && (this.company_id || this.driver_id)) throw new Error(\"Admin cannot be linked to a company or driver\");\n\t\t\t\t\tif(this.role === \"company\" && (!this.company_id || this.driver_id)) throw new Error(\"Company cannot be linked to a driver\");\n\t\t\t\t\t// driver user can be unlinked from driver when it is first created\n\t\t\t\t\tif(this.role === \"driver\" && this.company_id) throw new Error(\"Driver cannot be linked to a company\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n\tUser.associate = (models) => {\n\t\tUser.belongsTo(models.Driver, { foreignKey: 'driver_id' });\n\t\tUser.belongsTo(models.Company, { foreignKey: 'company_id' });\n\t};\n\n\treturn User;\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/models/vehicle.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = (sequelize, DataTypes) => {\n\tconst Vehicle = sequelize.define('Vehicle', {\n\t\tid: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tautoIncrement: true,\n\t\t\tprimaryKey: true\n\t\t},\n\t\tcompany_id: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tallowNull: false,\n\t\t\treferences: {\n\t\t\t\tmodel: 'companies',\n\t\t\t\tkey: 'id',\n\t\t\t},\n\t\t},\n\t\tbrand: {\n\t\t\ttype: DataTypes.STRING(40),\n\t\t\tallowNull: false\n\t\t},\n\t\tmodel: {\n\t\t\ttype: DataTypes.STRING(60),\n\t\t\tallowNull: false\n\t\t},\n\t\tlicense_plate: {\n\t\t\ttype: DataTypes.CHAR(8),\n\t\t\tallowNull: false,\n\t\t\tunique: true\n\t\t},\n\t\tregistration_date: {\n\t\t\ttype: DataTypes.DATEONLY,\n\t\t\tallowNull: false\n\t\t},\n\t\ttype: {\n\t\t\ttype: DataTypes.ENUM('gas', 'electric'),\n\t\t\tallowNull: true\n\t\t},\n\t\tin_use_by: {\n\t\t\ttype: DataTypes.INTEGER.UNSIGNED,\n\t\t\tallowNull: true,\n\t\t\tunique: true,\n\t\t\treferences: {\n\t\t\t\tmodel: 'drivers',\n\t\t\t\tkey: 'id',\n\t\t\t},\n\t\t}\n\t}, {\n\t\ttableName: 'vehicles',\n\t\ttimestamps: true\n\t});\n\n\tVehicle.associate = (models) => {\n\t\tVehicle.belongsTo(models.Company, { foreignKey: 'company_id' });\n\t\tVehicle.belongsTo(models.Driver, { foreignKey: 'in_use_by' });\n\t\tVehicle.hasMany(models.Receipt, { foreignKey: 'vehicle_id' });\n\t};\n\n\treturn Vehicle;\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/auth/2fa.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":8,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":53},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":78,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":78,"endColumn":7}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require(\"express\");\nconst { signLogin, verify2FALogin } = require(\"../../utils/jwt\");\nconst { User, Driver, Company, Vehicle } = require(\"../../models\");\nconst { generate2FASecret, verifyTOTP } = require(\"../../utils/totp\");\nconst { authenticate } = require(\"../../middleware/authentication\");\nconst rateLimit = require(\"../../utils/rateLimit\");\nconst { setCookie } = require(\"../../config/cookies\");\nconst { UnauthorizedError, ConflictError } = require('../../errors/httpErrors');\n\nconst router = Router();\n\nrouter.post('/', rateLimit(60,5), async (req,res,next) => {\n\ttry {\n\t\tconst { code } = req.body;\n\t\tconst tempToken = req.cookies.token;\n\t\tconst { payload, err } = verify2FALogin(tempToken);\n\t\tif(err) throw new UnauthorizedError(err);\n\t\t\n\t\tconst user = await User.findByPk(payload.sub, {\n\t\t\tinclude: [\n\t\t\t\t{\n\t\t\t\t\tmodel: Driver,\n\t\t\t\t\tinclude: [Vehicle]\n\t\t\t\t},\n\t\t\t\tCompany\n\t\t\t]\n\t\t});\n\t\tconst valid = verifyTOTP(code, user.twoFactorSecret);\n\t\tif(!valid) throw new UnauthorizedError('Código TOTP inválido');\n\t\n\t\tconst token = signLogin(user);\n\t\tsetCookie(res,'token',token);\n\t\tconst userResult = { ...user.Driver?.toJSON(), ...user.Company?.toJSON() };\n\t\treturn res.send({ role: user.role, user: userResult });\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get('/enable', authenticate, async (req,res,next) => {\n\ttry {\n\t\tconst user = req.user;\n\t\tif(user.twoFactorEnabled) throw new ConflictError(\"2FA ya está activo\");\n\t\tconst { secret, qrDataURL } = await generate2FASecret(user.email);\n\t\tuser.twoFactorSecret = secret;\n\t\tuser.twoFactorGeneratedAt = new Date();\n\t\tawait user.save();\n\t\treturn res.send({ qrDataURL, secret });\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.post('/enable', authenticate, async (req,res,next) => {\n\ttry {\n\t\tconst user = req.user;\n\t\tif(user.twoFactorEnabled) throw new ConflictError(\"2FA ya está activo\");\n\t\t\n\t\tif(new Date() - user.twoFactorGeneratedAt >= 300000) { // 5 min time limit\n\t\t\tuser.twoFactorGeneratedAt = null;\n\t\t\tuser.twoFactorSecret = null;\n\t\t\tawait user.save(); // optional\n\t\t\tthrow new UnauthorizedError('Tiempo expirado');\n\t\t}\n\t\t\n\t\tconst { code } = req.body;\n\t\tconst valid = verifyTOTP(code, user.twoFactorSecret);\n\t\tif(!valid) throw new UnauthorizedError('Código TOTP inválido');\n\t\n\t\tuser.twoFactorEnabled = true;\n\t\tawait user.save();\n\t\treturn res.status(204).end();\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nmodule.exports = router;\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/auth/index.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":8,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":53},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":13,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":14,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":55,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":7}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require(\"express\");\nconst { User, Driver, Company, Vehicle } = require(\"../../models\");\nconst bcrypt = require(\"bcrypt\");\nconst { signLogin, sign2FALogin } = require(\"../../utils/jwt\");\nconst rateLimit = require(\"../../utils/rateLimit\");\nconst { setCookie } = require(\"../../config/cookies\");\nconst { authenticate } = require(\"../../middleware/authentication\");\nconst { NotFoundError, UnauthorizedError } = require('../../errors/httpErrors');\n\nconst router = Router();\nconst DUMMY_PASSWORD = \"$2a$12$VqZPYU.9rWU8KA06gqEpW.kFB5KgahB66gS/ejDdd94C6kGdyFRfe\";\n\nrouter.use('/2fa', require(\"./2fa\"));\nrouter.use('/verify', require(\"./verifyEmail\"));\n\nrouter.post(\"/login\", rateLimit(600,10), rateLimit(60,5), async (req,res,next) => {\n\ttry {\n\t\tconst { email, password } = req.body;\n\t\tconst user = await User.findOne({\n\t\t\twhere: { email },\n\t\t\tinclude: [\n\t\t\t\t{\n\t\t\t\t\tmodel: Driver,\n\t\t\t\t\tinclude: [Vehicle]\n\t\t\t\t}, \n\t\t\t\tCompany\n\t\t\t]\n\t\t});\n\t\tconst passwordCorrect = await bcrypt.compare(password, user ? user.passwordHash:DUMMY_PASSWORD);\n\t\tif(!passwordCorrect | !user) throw new NotFoundError(\"Wrong email or password\");\n\t\tif(!user.emailVerified) throw new UnauthorizedError(\"Please verify your email\");\n\t\n\t\tconst requires2FA = user.twoFactorEnabled;\n\t\tconst token = requires2FA ? sign2FALogin(user):signLogin(user);\n\t\tsetCookie(res,'token',token);\n\t\n\t\tconst userResult = { ...user.Driver?.toJSON(), ...user.Company?.toJSON() };\n\t\n\t\treturn res.send({ requires2FA, ...(!requires2FA ? {role: user.role, user: userResult }:{})});\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.post('/logout', (req,res) => {\n\tres.clearCookie('token');\n\tres.end();\n});\n\nrouter.get('/info', authenticate, async (req,res) => {\n\tconst userResult = { ...req.user.Driver?.toJSON(), ...req.user.Company?.toJSON() };\n\treturn res.send({ role: req.user.role, user: userResult });\n});\n\nmodule.exports = router;\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/auth/verifyEmail.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'ConflictError' is assigned a value but never used.","line":7,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"ConflictError"},"fix":{"range":[352,367],"text":""},"desc":"Remove unused variable 'ConflictError'."}]},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":63,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":70},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":43,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":7}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require(\"express\");\nconst { User } = require(\"../../models\");\nconst { env } = require(\"../../config/env\");\nconst { sendMail } = require(\"../../config/nodemailer\");\nconst { verifyEmail, signEmailVerification } = require(\"../../utils/jwt\");\nconst rateLimit = require(\"../../utils/rateLimit\");\nconst { BadRequestError, UnauthorizedError, ConflictError } = require('../../errors/httpErrors');\n\nconst router = Router();\nrouter.use(rateLimit(3600,5));\n\nrouter.get(\"/\", async (req,res,next) => {\n\ttry {\n\t\tconst { token } = req.query;\n\t\tif(!token) throw new BadRequestError(\"Missing token\");\n\t\tconst { payload, err } = verifyEmail(token);\n\t\tif(err) throw new UnauthorizedError(err);\n\t\n\t\tawait User.update({ emailVerified: true, emailVerifiedAt: new Date()}, { where: { id: payload.sub, emailVerified: false }});\n\t\treturn res.status(204).end();\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.post(\"/\", async (req,res) => {\n\tconst { email } = req.body;\n\tconst user = await User.findOne({ where: { email }});\n\tif(user && !user.emailVerified) {\n\t\tconst token = signEmailVerification(user);\n\t\tconst url = `${env.appBaseUrl}/auth/verify?token=${token}`\n\t\tsendMail({\n\t\t\tto: user.email,\n\t\t\tsubject: \"Confirm your email\",\n\t\t\ttext: `Confirm your email: ${url}`,\n\t\t\thtml: `<p>Confirm your email here: <a href=\"${url}\">${url}</a></p>`\n\t\t});\n\t}\n\n\treturn res.status(204).end();\n});\n\nmodule.exports = router;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/companies.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'limitCompanyScope' is assigned a value but never used.","line":7,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"limitCompanyScope"},"fix":{"range":[274,292],"text":""},"desc":"Remove unused variable 'limitCompanyScope'."}]},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'NotFoundError' is not defined.","line":52,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":59,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":7}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require('express');\nconst { Company } = require('../models');\nconst bcrypt = require('bcrypt');\nconst env = require('../config/env');\nconst { sendMail } = require('../config/nodemailer');\nconst { signEmailVerification } = require('../utils/jwt');\nconst { limitCompanyScope, authenticate, hasRole } = require('../middleware/authentication');\n\nconst router = Router();\n\nrouter.post('/', async (req,res,next) => {\n\tconst { email, password, ...companyData } = req.body;\n\tconst emailSent = env.mail.sendVerification;\n\n\ttry {\n\t\tconst company = await Company.create(companyData);\n\n\t\tconst passwordHash = await bcrypt.hash(password, env.bcryptRounds);\n\t\tconst user = await company.createUser({ email, passwordHash, role: 'company', emailVerified: !emailSent });\n\n\t\tif(emailSent) {\n\t\t\tconst token = signEmailVerification(user);\n\t\t\tconst url = `${env.appBaseUrl}/auth/verify?token=${token}`;\n\n\t\t\tsendMail({\n\t\t\t\tto: email,\n\t\t\t\tsubject: 'Correo de verificación',\n\t\t\t\ttext: `Tu cuenta de empresa fue creada con éxito. Por favor confirme su correo haciendo click en el siguiente enlace: ${url}`,\n\t\t\t\thtml: `Tu cuenta de empresa fue creada con éxito. Por favor confirme su correo haciendo click en el siguiente enlace: <a href=\"${url}\">${url}</a>`,\n\t\t\t});\n\t\t}\n\n\t\treturn res.status(201).send({ emailSent });\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get('/', authenticate, hasRole('admin'), async (req,res,next) => {\n\ttry {\n\t\tconst companies = await Company.findAll();\n\t\treturn res.send(companies);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get('/:id', authenticate, hasRole('admin'), async (req,res,next) => {\n\ttry {\n\t\tconst { id } = req.params;\n\t\tconst company = await Company.findByPk(id);\n\t\tif(!company) throw new NotFoundError('Empresa no encontrada');\n\t\treturn res.send(company);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nmodule.exports = router;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/drivers.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'NotFoundError' is not defined.","line":59,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":66,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":7}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require('express');\nconst { Driver } = require('../models');\nconst bcrypt = require('bcrypt');\nconst env = require('../config/env');\nconst { sendMail } = require('../config/nodemailer');\nconst { signEmailVerification } = require('../utils/jwt');\nconst { hasRole, authenticate, limitCompanyScope } = require('../middleware/authentication');\n\nconst router = Router();\n\nrouter.post('/', authenticate, hasRole('company'), async (req,res,next) => {\n\tconst { email, password, ...driverData } = req.body;\n\tconst emailSent = env.mail.sendVerification;\n\n\ttry {\n\t\tconst driver = await Driver.create({ ...driverData, company_id: req.user.company_id });\n\n\t\tconst passwordHash = await bcrypt.hash(password, env.bcryptRounds);\n\t\tconst user = await driver.createUser({ email, passwordHash, role: 'driver', emailVerified: !emailSent });\n\n\t\tif(emailSent) {\n\t\t\tconst token = signEmailVerification(user);\n\t\t\tconst url = `${env.appBaseUrl}/auth/verify?token=${token}`;\n\n\t\t\tsendMail({\n\t\t\t\tto: email,\n\t\t\t\tsubject: 'Correo de verificación',\n\t\t\t\ttext: `Tu cuenta de conductor fue creada con éxito. Por favor confirme su correo haciendo click en el siguiente enlace: ${url}`,\n\t\t\t\thtml: `Tu cuenta de conductor fue creada con éxito. Por favor confirme su correo haciendo click en el siguiente enlace: <a href=\"${url}\">${url}</a>`,\n\t\t\t});\n\t\t}\n\n\t\treturn res.status(201).send({ emailSent });\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get('/', authenticate, hasRole('admin','company'), async (req,res,next) => {\n\ttry {\n\t\tconst company_id = limitCompanyScope(req);\n\t\tconst drivers = await Driver.findAll({ where: { ...(company_id ? {company_id}:{})}});\n\t\treturn res.send(drivers);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get('/:id', authenticate, hasRole('admin','company'), async (req,res,next) => {\n\ttry {\n\t\tconst { id } = req.params;\n\t\tconst company_id = limitCompanyScope(req);\n\t\tconst driver = await Driver.findOne({\n\t\t\twhere: {\n\t\t\t\tid,\n\t\t\t\t...(company_id ? {company_id}:{})\n\t\t\t}\n\t\t});\n\t\tif(!driver) throw new NotFoundError('Conductor no encontrado');\n\t\treturn res.send(driver);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nmodule.exports = router;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/receipts.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":40,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require(\"express\");\nconst { authenticate, hasRole, limitCompanyScope } = require(\"../middleware/authentication\");\nconst { Receipt, Driver, Vehicle } = require(\"../models\");\nconst { ConflictError } = require('../errors/httpErrors');\n\nconst router = Router();\nrouter.use(authenticate);\n\nrouter.post(\"/\", hasRole('driver'), async (req,res,next) => {\n\ttry {\n\t\tconst vehicle = await req.user.Driver.getVehicle();\n\t\tif(!vehicle) throw new ConflictError(\"Driver doesn't have a vehicle assigned\");\n\t\n\t\tawait Receipt.create({ ...req.body, driver_id: req.user.driver_id, vehicle_id: vehicle.id });\n\t\treturn res.status(201).end();\n\t} catch(error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get(\"/\", hasRole(\"admin\",\"company\"), async (req,res,next) => {\n\tconst company_id = limitCompanyScope(req) ?? req.query.company_id;\n\tconst where = {\n\t\t...(company_id ? { company_id }:{})\n\t};\n\ttry {\n\t\tconst receipts = await Receipt.findAll({\n\t\t\tattributes: { exclude: ['driver_id','vehicle_id'] },\n\t\t\tinclude: [\n\t\t\t\t{ model: Driver, where },\n\t\t\t\tVehicle\n\t\t\t]\n\t\t});\n\t\treturn res.send(receipts);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n})\n\nmodule.exports = router;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/stations.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":53,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":60},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":36},{"ruleId":"prefer-const","severity":1,"message":"'radius' is never reassigned. Use 'const' instead.","line":8,"column":8,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":14},{"ruleId":"prefer-const","severity":1,"message":"'lat' is never reassigned. Use 'const' instead.","line":8,"column":21,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":24},{"ruleId":"prefer-const","severity":1,"message":"'lon' is never reassigned. Use 'const' instead.","line":8,"column":26,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":34,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":7}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require('express');\nconst { EVStation, Sequelize, Sequelize: { Op } } = require('../models');\nconst { BadRequestError } = require('../errors/httpErrors');\n\nconst router = Router();\n\nrouter.get('/ev', async (req,res,next) => {\n\tlet { radius = 20, lat, lon, limit = 100 } = req.query;\n\tlimit = Math.min(limit,100);\n\tconst Rearth = 6371;\n\ttry {\n\t\tif(!lat || !lon) throw new BadRequestError('Introduce latitud y longitud');\n\t\tif(isNaN(+lat) || isNaN(+lon) || isNaN(+radius) || isNaN(+limit)) throw new BadRequestError('Consulta invalida');\n\t\tconst stations = await EVStation.findAll({\n\t\t\tattributes: {\n\t\t\t\tinclude: [\n\t\t\t\t\t[Sequelize.literal(`SQRT(POW(radians(latitude-${lat})*${Rearth},2) + POW(RADIANS(longitude-${lon})*${Rearth}*COS(RADIANS((latitude+${lat})/2)),2))`), 'distance']\n\t\t\t\t]\n\t\t\t},\n\t\t\torder: [['distance','ASC']],\n\t\t\thaving: {\n\t\t\t\tdistance: {\n\t\t\t\t\t[Op.lte]: radius\n\t\t\t\t}\n\t\t\t},\n\t\t\tlimit: +limit\n\t\t});\n\t\treturn res.send(stations);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nmodule.exports = router;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/users.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":6,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require(\"express\");\n\n\nconst router = Router();\n\nmodule.exports = router;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/routes/vehicles.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":75,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":82},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":117,"column":45,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":117,"endColumn":47,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"!==","actualOperator":"!="},"fix":{"range":[3533,3535],"text":"!=="},"desc":"Use '!==' instead of '!='."}]},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":147,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":147,"endColumn":7}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Router } = require(\"express\");\nconst { authenticate, hasRole, limitCompanyScope } = require(\"../middleware/authentication\");\nconst { Vehicle, Driver, Sequelize: { Op } } = require(\"../models\");\nconst { BadRequestError, ForbiddenError, NotFoundError, ConflictError } = require('../errors/httpErrors');\n\nconst router = Router();\n\nrouter.use(authenticate);\n\nrouter.post(\"/\", hasRole(\"admin\",\"company\"), async (req,res,next) => {\n\ttry {\n\t\tconst company_id = limitCompanyScope(req) ?? req.body?.company_id;\n\t\tif(!company_id) throw new BadRequestError('Falta company_id');\n\t\tconst vehicle = await Vehicle.create({ ...req.body, company_id, in_use_by: null });\n\t\treturn res.status(201).send(vehicle);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.put(\"/:id\", hasRole(\"admin\",\"company\"), async (req,res,next) => {\n\tconst { id } = req.params;\n\ttry {\n\t\tconst company_id = limitCompanyScope(req);\n\t\tconst [found] = await Vehicle.update(req.body, {\n\t\t\twhere : {\n\t\t\t\tid,\n\t\t\t\t...(company_id ? { company_id }:{})\n\t\t\t},\n\t\t\tfields: ['brand','model','license_plate','registration_date','type']\n\t\t});\n\t\tif(!found) throw new NotFoundError(\"Vehículo no encontrado\");\n\n\t\tconst vehicle = await Vehicle.findByPk(id);\n\t\treturn res.status(200).send(vehicle);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.delete(\"/:id\", hasRole(\"admin\",\"company\"), async (req,res,next) => {\n\tconst { id } = req.params;\n\ttry {\n\t\tconst company_id = limitCompanyScope(req);\n\t\tconst found = await Vehicle.destroy({\n\t\t\twhere : {\n\t\t\t\tid,\n\t\t\t\t...(company_id ? { company_id }:{})\n\t\t\t}\n\t\t});\n\t\tif(!found) throw new NotFoundError(\"Vehículo no encontrado\");\n\n\t\treturn res.status(204).end();\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get(\"/\", async (req,res,next) => {\n\tconst { available } = req.query; // return only unused vehicles\n\tconst company_id = limitCompanyScope(req) ?? req.query.company_id;\n\ttry {\n\t\tconst vehicles = await Vehicle.findAll({ where: {\n\t\t\t...(company_id ? {company_id}:{}),\n\t\t\t...(available === \"true\" ? {\n\t\t\t\tin_use_by: {\n\t\t\t\t\t[Op.is]: null\n\t\t\t\t}\n\t\t\t}:{})\n\t\t}});\n\t\treturn res.status(200).send(vehicles);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get(\"/assigned\", hasRole('driver'), async (req,res,next) => {\n\ttry { // useless\n\t\tif(req.user.role === \"driver\") return res.send(await req.user.Driver.getVehicle());\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.get(\"/:id\", async (req,res,next) => {\n\tconst { id } = req.params;\n\tconst company_id = limitCompanyScope(req);\n\ttry {\n\t\tconst vehicle = await Vehicle.findOne({ where: { id, company_id }});\n\t\tif(!vehicle) throw new NotFoundError('Vehículo no encontrado');\n\t\treturn res.status(200).send(vehicle);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.put(\"/:id/assign\", async (req,res,next) => {\n\tconst { id } = req.params;\n\tconst company_id = limitCompanyScope(req);\n\tconst where = company_id ? { company_id }:{}\n\ttry {\n\t\tlet driver = req.user.Driver;\n\t\tif(!driver) {\n\t\t\tif(!req.body?.driver_id) throw new BadRequestError('Falta driver_id');\n\t\t\tdriver = await Driver.findOne({ where: {id: req.body.driver_id, ...where} });\n\t\t}\n\t\tif(!driver) throw new NotFoundError(\"Conductor no encontrado\");\n\n\t\tlet vehicle = await driver.getVehicle();\n\t\tif(vehicle) {\n\t\t\tif(driver.id !== vehicle.in_use_by) throw new ConflictError(\"El conductor ya tiene un vehículo asignado\");\n\t\t\treturn res.status(200).send(vehicle);\n\t\t}\n\n\t\tvehicle = await Vehicle.findOne({ where: {id, ...where} });\n\t\tif(!vehicle) throw new NotFoundError(\"Vehículo no encontrado\");\n\t\tif(vehicle.in_use_by && vehicle.in_use_by != driver.id)\n\t\t\tthrow new ConflictError(\"Vehículo en uso por otro conductor\");\n\n\t\tawait driver.setVehicle(vehicle);\n\t\treturn res.status(200).send(vehicle);\n\t} catch (error) {\n\t\tnext(error);\n\t}\n});\n\nrouter.delete(\"/:id/assign\", async (req,res,next) => {\n\tconst { id } = req.params;\n\tconst company_id = limitCompanyScope(req);\n\ttry {\n\t\tconst vehicle = await Vehicle.findOne({ where: {\n\t\t\tid,\n\t\t\t...(company_id ? {company_id}:{})\n\t\t}});\n\n\t\tif(!vehicle) throw new NotFoundError(\"Vehículo no encontrado\");\n\t\tif(vehicle.in_use_by && req.user.driver_id && vehicle.in_use_by !== req.user.driver_id) \n\t\t\tthrow new ForbiddenError(\"Vehículo en uso por otro conductor\");\n\n\t\tawait vehicle.setDriver(null);\n\t\treturn res.status(204).end();\n\t} catch (error) {\n\t\tnext(error)\n\t}\n});\n\nmodule.exports = router;","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/seed.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'env' is assigned a value but never used.","line":1,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"env"},"fix":{"range":[0,36],"text":""},"desc":"Remove unused variable 'env'."}]},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":8,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":9,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":10,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":19,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":19,"endColumn":16,"suggestions":[{"fix":{"range":[669,709],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":22,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":22,"endColumn":16,"suggestions":[{"fix":{"range":[768,806],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":25,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":25,"endColumn":16,"suggestions":[{"fix":{"range":[867,903],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":28,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":28,"endColumn":16,"suggestions":[{"fix":{"range":[962,999],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":31,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":31,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":31,"endColumn":16,"suggestions":[{"fix":{"range":[1059,1093],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":34,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":34,"endColumn":16,"suggestions":[{"fix":{"range":[1150,1197],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":36,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":38,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":12}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const env = require(\"./config/env\");\nconst connectDB = require('./config/db');\nconst { sequelize, Sequelize } = require('./models');\n\n// Import all seeders\nconst seedEVStations = require('./seeders/20250926233745-evstations');\nconst seedCompanies = require('./seeders/20250925175148-companies');\nconst seedDrivers = require('./seeders/20250925175136-drivers');\nconst seedVehicles = require('./seeders/20250925175205-vehicles');\nconst seedUsers = require('./seeders/20250925175153-users');\n\nasync function runSeeders() {\n  await connectDB(); // Connect and sync DB\n  const queryInterface = sequelize.getQueryInterface();\n\n  await deleteAll(queryInterface);\n\n  try {\n    console.log('⏳ Seeding EV stations...');\n\tawait seedEVStations.up(queryInterface, Sequelize);\n\n    console.log('⏳ Seeding companies...');\n    await seedCompanies.up(queryInterface, Sequelize);\n\n    console.log('⏳ Seeding drivers...');\n    await seedDrivers.up(queryInterface, Sequelize);\n\n    console.log('⏳ Seeding vehicles...');\n    await seedVehicles.up(queryInterface, Sequelize);\n\n    console.log('⏳ Seeding users...');\n    await seedUsers.up(queryInterface, Sequelize);\n\n    console.log('✅ All seeders ran successfully.');\n  } catch (err) {\n    console.error('❌ Seeding error:', err.message);\n\tawait deleteAll(queryInterface);\n    process.exit(1);\n  }\n}\n\nasync function deleteAll(queryInterface) {\n\tawait seedCompanies.down(queryInterface, Sequelize);\n\tawait seedDrivers.down(queryInterface, Sequelize);\n\tawait seedVehicles.down(queryInterface, Sequelize);\n\tawait seedUsers.down(queryInterface, Sequelize);\n\tawait seedEVStations.down(queryInterface, Sequelize);\n}\n\nrunSeeders();","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/seeders/20250925175136-drivers.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[109,120],"text":""},"desc":"Remove unused variable 'Sequelize'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[743,754],"text":""},"desc":"Remove unused variable 'Sequelize'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\n\n/** @type {import('sequelize-cli').Migration} */\nmodule.exports = {\n  async up (queryInterface, Sequelize) {\n    const companies = await queryInterface.sequelize.query(`SELECT id FROM companies;`);\n    const companyRows = companies[0];\n\n    const drivers = [];\n    let driverCounter = 1;\n\n    for (const company of companyRows) {\n      for (let i = 0; i < 2; i++) {\n        drivers.push({\n          first_name: `Driver${driverCounter}`,\n          last_name: `Lastname${driverCounter}`,\n          company_id: company.id,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n        driverCounter++;\n      }\n    }\n\n    await queryInterface.bulkInsert('drivers', drivers);\n  },\n\n  async down (queryInterface, Sequelize) {\n    await queryInterface.bulkDelete('drivers', null, {});\n  }\n};\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/seeders/20250925175148-companies.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[109,120],"text":""},"desc":"Remove unused variable 'Sequelize'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":43,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[1152,1163],"text":""},"desc":"Remove unused variable 'Sequelize'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\n\n/** @type {import('sequelize-cli').Migration} */\nmodule.exports = {\n  async up (queryInterface, Sequelize) {\n    await queryInterface.bulkInsert('companies', [\n      {\n        name: 'Transporte Alpha S.A.',\n        postal_code: 28001,\n        address: 'Calle de Alcalá 123',\n        state: 'Madrid',\n        CIF: 'D7521345D',\n        subscription_active: true,\n        payment_entity: 'CaixaBank',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        name: 'Beta Transporte y Logística SL',\n        postal_code: 46002,\n        address: 'Avenida del Cid 45',\n        state: 'Valencia',\n        CIF: 'B23456783',\n        subscription_active: true,\n        payment_entity: 'Santander',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        name: 'Gamma Mudanzas y Transportes',\n        postal_code: 48005,\n        address: 'Calle Gran Vía 89',\n        state: 'Bizkaia',\n        CIF: 'J3292121E',\n        subscription_active: true,\n        payment_entity: 'BBVA',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n    ]);\n  },\n\n  async down (queryInterface, Sequelize) {\n    await queryInterface.bulkDelete('companies', null, {});\n  }\n};","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/seeders/20250925175153-users.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":7},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[143,154],"text":""},"desc":"Remove unused variable 'Sequelize'."}]},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'emailVerified'.","line":31,"column":7,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":31,"endColumn":20},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":43,"column":33,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":43,"endColumn":35,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1267,1269],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'emailVerified'.","line":49,"column":9,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":49,"endColumn":22},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":62,"column":33,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":62,"endColumn":35,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1889,1891],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'emailVerified'.","line":68,"column":9,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":68,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":78,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[2333,2344],"text":""},"desc":"Remove unused variable 'Sequelize'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nconst bcrypt = require('bcrypt');\n\n/** @type {import('sequelize-cli').Migration} */\nmodule.exports = {\n  async up (queryInterface, Sequelize) {\n    const passwordHash = () => bcrypt.hashSync('123456', 12);\n\n    const companies = await queryInterface.sequelize.query(`\n      SELECT id FROM companies ORDER BY id ASC;\n    `);\n    const drivers = await queryInterface.sequelize.query(`\n      SELECT id FROM drivers ORDER BY id ASC;\n    `);\n\n    const companyRows = companies[0];\n    const driverRows = drivers[0];\n\n    const users = [];\n\n    // Admin user (not tied to any company or driver)\n    users.push({\n      email: 'admin@mail.com',\n      passwordHash: passwordHash(),\n      twoFactorEnabled: true,\n      twoFactorSecret: 'HEQUAQRPHAZEEL2BGZZW4425KZQTOORS',\n      emailVerified: true,\n      role: 'admin',\n      company_id: null,\n      driver_id: null,\n      emailVerified: true,\n      emailVerifiedAt: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n\n    // Company users\n    companyRows.forEach((company, i) => {\n      const companyNumber = (i + 1).toString().padStart(2, '0');\n      users.push({\n        email: `company${companyNumber}@mail.com`,\n        passwordHash: passwordHash(),\n        twoFactorEnabled: (i&1) == 0, // habilitado para empresas impares\n        twoFactorSecret: 'HEQUAQRPHAZEEL2BGZZW4425KZQTOORS',\n        emailVerified: true,\n        role: 'company',\n        company_id: company.id,\n        driver_id: null,\n        emailVerified: true,\n        emailVerifiedAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    });\n\n    // Driver users\n    driverRows.forEach((driver, i) => {\n      const driverNumber = (i + 1).toString().padStart(2, '0');\n      users.push({\n        email: `driver${driverNumber}@mail.com`,\n        passwordHash: passwordHash(),\n        twoFactorEnabled: (i&1) == 0, // habilitado para drivers impares\n        twoFactorSecret: 'HEQUAQRPHAZEEL2BGZZW4425KZQTOORS',\n        emailVerified: true,\n        role: 'driver',\n        company_id: null,\n        driver_id: driver.id,\n        emailVerified: true,\n        emailVerifiedAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    });\n\n    await queryInterface.bulkInsert('users', users);\n  },\n\n  async down (queryInterface, Sequelize) {\n    await queryInterface.bulkDelete('users', null, {});\n  }\n};\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/seeders/20250925175205-vehicles.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[109,120],"text":""},"desc":"Remove unused variable 'Sequelize'."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":28,"column":25,"nodeType":"MemberExpression","endLine":28,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[1746,1757],"text":""},"desc":"Remove unused variable 'Sequelize'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\n\n/** @type {import('sequelize-cli').Migration} */\nmodule.exports = {\n  async up (queryInterface, Sequelize) {\n    const drivers = await queryInterface.sequelize.query(`SELECT id, company_id FROM drivers;`);\n    const driverRows = drivers[0];\n\n    const vehicleData = {\n      'SEAT': ['Ibiza', 'Leon', 'Arona', 'Ateca'],\n      'Peugeot': ['208', '308', 'Partner', 'Rifter'],\n      'Citroën': ['Berlingo', 'C3', 'C4', 'Jumpy'],\n      'Renault': ['Clio', 'Megane', 'Kangoo', 'Trafic'],\n      'Fiat': ['Panda', '500', 'Ducato', 'Doblo'],\n      'Opel': ['Corsa', 'Combo', 'Vivaro', 'Astra'],\n      'Volkswagen': ['Golf', 'Polo', 'Caddy', 'Transporter'],\n      'Ford': ['Fiesta', 'Focus', 'Transit Connect', 'Transit Custom'],\n      'Skoda': ['Fabia', 'Octavia', 'Superb', 'Scala'],\n      'Dacia': ['Sandero', 'Duster', 'Dokker', 'Lodgy'],\n      'Mercedes-Benz': ['Citan', 'Vito', 'Sprinter', 'Clase A'],\n    };\n\n    const brands = Object.keys(vehicleData);\n    const vehicles = [];\n\n    driverRows.forEach((driver, i) => {\n      const brand = brands[Math.floor(Math.random() * brands.length)];\n      const modelList = vehicleData[brand];\n      const model = modelList[Math.floor(Math.random() * modelList.length)];\n\n      vehicles.push({\n        brand,\n        model,\n        license_plate: Math.floor(Math.random()*10000)+new Array(3).fill(0).map(_=> String.fromCharCode(Math.floor(65+Math.random()*26))).join(\"\"),\n        registration_date: new Date(),\n        type: ['gas', 'electric'][i&1],\n        in_use_by: driver.id,\n        company_id: driver.company_id,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    });\n\n    await queryInterface.bulkInsert('vehicles', vehicles);\n  },\n\n  async down (queryInterface, Sequelize) {\n    await queryInterface.bulkDelete('vehicles', null, {});\n  }\n};\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/seeders/20250926233745-evstations.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":6,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":7},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[156,167],"text":""},"desc":"Remove unused variable 'Sequelize'."}]},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":10,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":44},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found createReadStream from package \"fs\" with non literal argument at index 0","line":11,"column":5,"nodeType":"CallExpression","endLine":11,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":21,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":23,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":23,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":23,"endColumn":20,"suggestions":[{"fix":{"range":[623,677],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Sequelize' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sequelize"},"fix":{"range":[793,804],"text":""},"desc":"Remove unused variable 'Sequelize'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict';\nconst { parse } = require('csv-parse');\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  async up (queryInterface, Sequelize) {\n    const stations = [];\n    let i = 1;\n    const filePath = path.resolve(__dirname,'PuntosCarga.csv');\n    fs.createReadStream(filePath).pipe(\n      parse({\n        columns: true,\n        delimiter: '|',\n        quote: false\n      }).on('data', (row) => {\n        row.id = i++;\n        row.max_power *= 1000;\n        stations.push(row)\n      }).on(\"error\", function (err) {\n        console.error(err.message);\n      }).on(\"end\", async () => {\n        console.log(stations[0], stations[stations.length-1]);\n        await queryInterface.bulkInsert('evstations', stations);\n      })\n    );\n  },\n\n  async down (queryInterface, Sequelize) {\n    await queryInterface.bulkDelete('evstations', null, {});\n  }\n};\n","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/swagger.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":8,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":10,"column":2,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":10,"column":2,"nodeType":"MemberExpression","messageId":"limited","endLine":10,"endColumn":13,"suggestions":[{"fix":{"range":[284,314],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":14,"column":2,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":14,"column":2,"nodeType":"MemberExpression","messageId":"limited","endLine":14,"endColumn":13,"suggestions":[{"fix":{"range":[348,398],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require(\"express\");\nconst env = require('./config/env');\n\nconst app = express();\n\nif(env.nodeEnv === \"development\") {\n\tconst swaggerUi = require(\"swagger-ui-express\");\n\tconst apiSpec = require('../docs/api');\n\tapp.use('/', swaggerUi.serve, swaggerUi.setup(apiSpec));\n\tconsole.log(\"Swagger loaded\");\n}\n\napp.listen(env.port, () => {\n\tconsole.log(`Server started on port ${env.port}`);\n});","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/utils/jwt.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":25,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":7}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const jwt = require(\"jsonwebtoken\");\nconst env = require(\"../config/env\");\n\nconst signToken = (subject,expiresIn,secret) => jwt.sign({}, secret, { subject: String(subject), expiresIn });\nconst verifyToken = (token,secret) => {\n\tif(!token) return { err: \"Missing token\" };\n\ttry {\n\t\treturn { payload: jwt.verify(token,secret) };\n\t} catch (error) {\n\t\tconst err = (() => {\n\t\t\tswitch(error.name) {\n\t\t\t\tcase \"TokenExpiredError\":\n\t\t\t\tcase \"NotBeforeError\":\n\t\t\t\t\treturn \"Token expired\";\n\t\t\t\tcase \"JsonWebTokenError\":\n\t\t\t\t\treturn \"Invalid token\";\n\t\t\t\tdefault:\n\t\t\t\t\treturn \"Something went wrong\";\n\t\t\t}\n\t\t})();\n\t\treturn { err };\n\t}\n};\n\nmodule.exports = {\n\tsignLogin: user => signToken(user.id,env.jwt.accessExpires,env.jwt.accessSecret),\n\tsign2FALogin: user => signToken(user.id,env.jwt.tempExpires,env.jwt.tempSecret),\n\tsignEmailVerification: user => signToken(user.id,env.jwt.emailExpires,env.jwt.emailSecret),\n\tverifyLogin: token => verifyToken(token, env.jwt.accessSecret),\n\tverify2FALogin: token => verifyToken(token, env.jwt.tempSecret),\n\tverifyEmail: token => verifyToken(token, env.jwt.emailSecret),\n}","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/utils/rateLimit.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const rateLimit = require(\"express-rate-limit\");\n\nmodule.exports = (windowSeconds, max) => rateLimit({\n\twindowMs: windowSeconds*1000,\n\tmax,\n\tskipSuccessfulRequests: true,\n\trequestWasSuccessful: (req,res) => res.statusCode < 400 || res.statusCode === 429,\n\thandler: (req,res) => {\n\t\tres.status(429).send({ error: \"Too many requests\" });\n\t}\n});","usedDeprecatedRules":[]}
{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Backend/src/utils/totp.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const speakeasy = require(\"speakeasy\");\nconst qrcode = require(\"qrcode\");\n\nmodule.exports = {\n\tgenerate2FASecret: async (email, issuer = \"App\") => {\n\t\tconst { base32: secret, otpauth_url } = speakeasy.generateSecret({\n\t\t\tlength: 20,\n\t\t\tname: `${issuer}:${email}`,\n\t\t\tissuer\n\t\t});\n\t\tconst qrDataURL = await qrcode.toDataURL(otpauth_url, { errorCorrectionLevel: 'L' });\n\t\treturn { secret, qrDataURL };\n\t},\n\n\tverifyTOTP: (code, secret) => speakeasy.totp.verify({\n\t\tsecret,\n\t\tencoding: \"base32\",\n\t\ttoken: code,\n\t\twindow: 1\n\t})\n};","usedDeprecatedRules":[]}
