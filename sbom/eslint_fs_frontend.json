[{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/config/api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/auth/authService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/auth/authSlice.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":16,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":16,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":16,"endColumn":14,"suggestions":[{"fix":{"range":[330,353],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'DataTransfer' is not defined.","line":29,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":45,"column":2,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":2,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":13,"suggestions":[{"fix":{"range":[1230,1263],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport authService from './authService';\n\nconst initialState = {\n\tuser: null,\n\trole: null,\n\trequires2FA: false,\n\ttarget: {\n\t\tlatitude: 0,\n\t\tlongitude: 0,\n\t},\n};\n\nexport const getUserInfo = createAsyncThunk('auth/info', async (_, { rejectWithValue }) => {\n\ttry {\n\t\tconsole.log('wrfsery');\n\t\tconst userData = await authService.userInfo();\n\t\treturn userData;\n\t} catch (err) {\n\t\treturn rejectWithValue(err.response?.data?.message || 'Error de red o del servidor');\n\t}\n});\n\nexport const loginUser = createAsyncThunk(\n\t'auth/login',\n\tasync (credentials, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst userData = await authService.userLogin(credentials);\n\t\t\treturn { ...userData, location: DataTransfer.location };\n\t\t} catch (err) {\n\t\t\treturn rejectWithValue(err.response?.data?.message || 'Error de red o del servidor');\n\t\t}\n\t}\n);\n\nexport const logoutUser = createAsyncThunk('auth/logout', async (_, { rejectWithValue }) => {\n\ttry {\n\t\treturn await authService.userLogout();\n\t} catch (err) {\n\t\treturn rejectWithValue(err.response?.data?.message || 'Error de red o del servidor');\n\t}\n});\n\nexport const registerDriver = createAsyncThunk('auth/registerDriver', async user => {\n\tconsole.log('desde store', user);\n});\n\nexport const verify2FA = createAsyncThunk('/auth/2fa', async (code, { rejectWithValue }) => {\n\ttry {\n\t\tconst response = await authService.verify2FA(code);\n\t\treturn response;\n\t} catch (err) {\n\t\treturn rejectWithValue('CÃ³digo 2FA incorrecto o expirado', err);\n\t}\n});\n\nexport const authSlice = createSlice({\n\tname: 'auth',\n\tinitialState,\n\treducers: {\n\t\tresetAuthState: () => initialState,\n\t},\n\textraReducers: builder => {\n\t\tbuilder.addCase(loginUser.fulfilled, (state, action) => {\n\t\t\tstate.target = action.payload.location;\n\t\t\tstate.requires2FA = action.payload.requires2FA;\n\t\t\tstate.role = action.payload.role ?? null;\n\t\t\tstate.user = action.payload.user ?? null;\n\t\t});\n\t\tbuilder.addCase(logoutUser.fulfilled, state => {\n\t\t\tstate.target = null;\n\t\t\tstate.requires2FA = null;\n\t\t\tstate.role = null;\n\t\t\tstate.user = null;\n\t\t});\n\t\tbuilder.addCase(verify2FA.fulfilled, (state, action) => {\n\t\t\tstate.user = action.payload.user;\n\t\t\tstate.role = action.payload.role;\n\t\t\tstate.requires2FA = false;\n\t\t});\n\t\tbuilder.addCase(getUserInfo.fulfilled, (state, action) => {\n\t\t\tstate.role = action.payload.role;\n\t\t\tstate.user = action.payload.user;\n\t\t});\n\t},\n});\nexport const { resetAuthState } = authSlice.actions;\nexport default authSlice.reducer;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/oilApi/oilService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/oilApi/oilSlice.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":30,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport oilService from './oilService';\n\nconst initialState = {\n\tprovincias: [],\n\tmunicipios: [],\n\tgastations: [],\n\tgastationDetails: null,\n\tgastationNextMe: [],\n\tisLoading: false,\n\tisError: false,\n\tmessage: '',\n};\n\nexport const getProvincias = createAsyncThunk('oil/getProvincias', async thunkAPI => {\n\ttry {\n\t\treturn await oilService.getProvincias();\n\t} catch (error) {\n\t\tconst message = error.response?.data?.message || error.message || error.toString();\n\t\treturn thunkAPI.rejectWithValue(message);\n\t}\n});\n\nexport const getMunicipios = createAsyncThunk(\n\t'oil/getMunicipios',\n\tasync (idProvincia, thunkAPI) => {\n\t\ttry {\n\t\t\treturn await oilService.getMunicipios(idProvincia);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tconst message = error.response?.data?.message || error.message || error.toString();\n\t\t\treturn thunkAPI.rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const getGastations = createAsyncThunk(\n\t'oil/getGastations',\n\tasync (idMunicipio, thunkAPI) => {\n\t\ttry {\n\t\t\treturn await oilService.getGastations(idMunicipio);\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.message || error.message || error.toString();\n\t\t\treturn thunkAPI.rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const getGastationDetails = createAsyncThunk(\n\t'oil/getGastationDetails',\n\tasync (idEstacion, thunkAPI) => {\n\t\ttry {\n\t\t\treturn await oilService.getGastationDetails(idEstacion);\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.message || error.message || error.toString();\n\t\t\treturn thunkAPI.rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const getGastationNextMe = createAsyncThunk(\n\t'oil/getGastationNextMe',\n\tasync ({ latitud, longitud, radio }, thunkAPI) => {\n\t\ttry {\n\t\t\treturn await oilService.getGastationNextMe(latitud, longitud, radio);\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.message || error.message || error.toString();\n\t\t\treturn thunkAPI.rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const oilSlice = createSlice({\n\tname: 'oil',\n\tinitialState,\n\treducers: {\n\t\treset: state => {\n\t\t\tstate.isLoading = false;\n\t\t\tstate.isError = false;\n\t\t\tstate.message = '';\n\t\t},\n\t},\n\textraReducers: builder => {\n\t\tbuilder\n\t\t\t.addCase(getProvincias.pending, state => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t\tstate.isError = false;\n\t\t\t})\n\t\t\t.addCase(getProvincias.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.provincias = action.payload;\n\t\t\t})\n\t\t\t.addCase(getProvincias.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload;\n\t\t\t})\n\t\t\t.addCase(getMunicipios.pending, state => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t\tstate.isError = false;\n\t\t\t\tstate.municipios = [];\n\t\t\t})\n\t\t\t.addCase(getMunicipios.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.municipios = action.payload;\n\t\t\t})\n\t\t\t.addCase(getMunicipios.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload;\n\t\t\t\tstate.municipios = [];\n\t\t\t})\n\t\t\t.addCase(getGastations.pending, state => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t\tstate.isError = false;\n\t\t\t})\n\t\t\t.addCase(getGastations.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.gastations = action.payload;\n\t\t\t})\n\t\t\t.addCase(getGastations.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload;\n\t\t\t})\n\t\t\t.addCase(getGastationDetails.pending, state => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t\tstate.isError = false;\n\t\t\t})\n\t\t\t.addCase(getGastationDetails.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.gastationDetails = action.payload;\n\t\t\t})\n\t\t\t.addCase(getGastationDetails.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload;\n\t\t\t})\n\t\t\t.addCase(getGastationNextMe.pending, state => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t\tstate.isError = false;\n\t\t\t})\n\t\t\t.addCase(getGastationNextMe.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.gastationNextMe = action.payload;\n\t\t\t})\n\t\t\t.addCase(getGastationNextMe.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload;\n\t\t\t\tstate.gastationNextMe = [];\n\t\t\t});\n\t},\n});\n\nexport const { reset } = oilSlice.actions;\nexport default oilSlice.reducer;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/receipts/receiptService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/receipts/receiptSlice.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/store.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/vehicles/vehicleService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/src/redux/vehicles/vehicleSlice.js","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":143,"column":6,"nodeType":"MemberExpression","endLine":143,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":159,"column":6,"nodeType":"MemberExpression","endLine":159,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":171,"column":6,"nodeType":"MemberExpression","endLine":171,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport vehicleService from './vehicleService';\n\nconst initialState = {\n\tvehicles: [],\n\tselectedVehicle: null,\n\tstatus: 'idle',\n\terror: null,\n};\n\nexport const createVehicle = createAsyncThunk(\n\t'vehicles/createVehicle',\n\tasync (vehicleData, { rejectWithValue }) => {\n\t\ttry {\n\t\t\treturn await vehicleService.create(vehicleData);\n\t\t} catch (error) {\n\t\t\treturn rejectWithValue(error.response?.data?.error || 'Error al crear el vehÃ­culo');\n\t\t}\n\t}\n);\n\nexport const fetchVehicles = createAsyncThunk(\n\t'vehicles/fetchVehicles',\n\tasync (_, { rejectWithValue }) => {\n\t\ttry {\n\t\t\treturn await vehicleService.getAll();\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.error || 'Error al cargar los vehÃ­culos';\n\t\t\treturn rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const fetchVehicleById = createAsyncThunk(\n\t'vehicles/fetchVehicleById',\n\tasync (id, { rejectWithValue }) => {\n\t\ttry {\n\t\t\treturn await vehicleService.getById(id);\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.error || 'Error al cargar el vehÃ­culo';\n\t\t\treturn rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const updateVehicle = createAsyncThunk(\n\t'vehicles/updateVehicle',\n\tasync (vehicleData, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst { id, ...fields } = vehicleData;\n\t\t\treturn await vehicleService.update(id, fields);\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.error || 'Error al actualizar el vehÃ­culo';\n\t\t\treturn rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const deleteVehicle = createAsyncThunk(\n\t'vehicles/deleteVehicle',\n\tasync (id, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tawait vehicleService.remove(id);\n\t\t\treturn id; // En caso de Ã©xito, se devuelve el ID\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.error || 'Error al eliminar el vehÃ­culo';\n\t\t\treturn rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const assignVehicle = createAsyncThunk(\n\t'vehicles/assignVehicle',\n\tasync ({ vehicleId, driverId }, { rejectWithValue }) => {\n\t\ttry {\n\t\t\treturn await vehicleService.assign(vehicleId, driverId);\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.error || 'Error al asignar el vehÃ­culo';\n\t\t\treturn rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const unassignVehicle = createAsyncThunk(\n\t'vehicles/unassignVehicle',\n\tasync (vehicleId, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tawait vehicleService.unassign(vehicleId);\n\t\t\treturn vehicleId;\n\t\t} catch (error) {\n\t\t\tconst message = error.response?.data?.error || 'Error al desasignar el vehÃ­culo';\n\t\t\treturn rejectWithValue(message);\n\t\t}\n\t}\n);\n\nconst vehicleSlice = createSlice({\n\tname: 'vehicles',\n\tinitialState,\n\treducers: {},\n\textraReducers: builder => {\n\t\tbuilder\n\t\t\t// createVehicle\n\t\t\t.addCase(createVehicle.pending, state => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t\tstate.error = null;\n\t\t\t})\n\t\t\t.addCase(createVehicle.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'succeeded';\n\t\t\t\tstate.vehicles.push(action.payload);\n\t\t\t})\n\t\t\t.addCase(createVehicle.rejected, (state, action) => {\n\t\t\t\tstate.status = 'failed';\n\t\t\t\tstate.error = action.payload;\n\t\t\t})\n\t\t\t// fetchVehicles\n\t\t\t.addCase(fetchVehicles.pending, state => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(fetchVehicles.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'succeeded';\n\t\t\t\tstate.vehicles = action.payload;\n\t\t\t})\n\t\t\t.addCase(fetchVehicles.rejected, (state, action) => {\n\t\t\t\tstate.status = 'failed';\n\t\t\t\tstate.error = action.error.message;\n\t\t\t})\n\t\t\t// fetchVehicleById\n\t\t\t.addCase(fetchVehicleById.pending, state => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(fetchVehicleById.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'succeeded';\n\t\t\t\tstate.selectedVehicle = action.payload;\n\t\t\t})\n\t\t\t// updateVehicle\n\t\t\t.addCase(updateVehicle.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'succeeded';\n\t\t\t\tstate.selectedVehicle = action.payload;\n\n\t\t\t\tconst index = state.vehicles.findIndex(v => v.id === action.payload.id);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tstate.vehicles[index] = action.payload;\n\t\t\t\t}\n\t\t\t})\n\t\t\t// deleteVehicle\n\t\t\t.addCase(deleteVehicle.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'succeeded';\n\n\t\t\t\tstate.vehicles = state.vehicles.filter(v => v.id !== action.payload);\n\t\t\t\tstate.selectedVehicle = null;\n\t\t\t})\n\t\t\t//assignVehicle;\n\t\t\t.addCase(assignVehicle.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'succeeded';\n\t\t\t\tconst updatedVehicle = action.payload;\n\t\t\t\tconst index = state.vehicles.findIndex(v => v.id === updatedVehicle.id);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tstate.vehicles[index] = updatedVehicle;\n\t\t\t\t}\n\t\t\t\tif (state.selectedVehicle && state.selectedVehicle.id === updatedVehicle.id) {\n\t\t\t\t\tstate.selectedVehicle = updatedVehicle;\n\t\t\t\t}\n\t\t\t})\n\t\t\t//unassignVehicle;\n\t\t\t.addCase(unassignVehicle.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'succeeded';\n\t\t\t\tconst vehicleId = action.payload;\n\t\t\t\tconst index = state.vehicles.findIndex(v => v.id === vehicleId);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tstate.vehicles[index].in_use_by = null;\n\t\t\t\t}\n\t\t\t\tif (state.selectedVehicle && state.selectedVehicle.id === vehicleId) {\n\t\t\t\t\tstate.selectedVehicle.in_use_by = null;\n\t\t\t\t}\n\t\t\t});\n\t},\n});\n\nexport default vehicleSlice.reducer;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/Cyberseguridad/Cyberseguridad/FS-Frontend/vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]